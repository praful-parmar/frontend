{"remainingRequest":"/home/praful/aappp/OC_7-Build_a_Full-Stack_solution-main/frontend/node_modules/babel-loader/lib/index.js!/home/praful/aappp/OC_7-Build_a_Full-Stack_solution-main/frontend/node_modules/ts-loader/index.js??ref--13-2!/home/praful/aappp/OC_7-Build_a_Full-Stack_solution-main/frontend/src/helpers/post-getter.ts","dependencies":[{"path":"/home/praful/aappp/OC_7-Build_a_Full-Stack_solution-main/frontend/src/helpers/post-getter.ts","mtime":1624537514000},{"path":"/home/praful/aappp/OC_7-Build_a_Full-Stack_solution-main/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/praful/aappp/OC_7-Build_a_Full-Stack_solution-main/frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/praful/aappp/OC_7-Build_a_Full-Stack_solution-main/frontend/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL3ByYWZ1bC9hYXBwcC9PQ183LUJ1aWxkX2FfRnVsbC1TdGFja19zb2x1dGlvbi1tYWluL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyI7CmltcG9ydCB7IFBvc3RDbGFzcyB9IGZyb20gIkAvdHlwZXMiOwppbXBvcnQgeyBnZXRIdHRwSGVhZGVycyB9IGZyb20gIi4vaHR0cC1oZWFkZXItZ2V0dGVyIjsKZXhwb3J0IGZ1bmN0aW9uIGdldFBvc3RzKCkgewogIHJldHVybiBfZ2V0UG9zdHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gX2dldFBvc3RzKCkgewogIF9nZXRQb3N0cyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgIHZhciBhcGlfcmVzcG9uc2UsIHBvc3RzX2xpc3QsIGpzb25fcG9zdHNfbGlzdDsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI7CiAgICAgICAgICAgIHJldHVybiBmZXRjaCgiaHR0cDovL2xvY2FsaG9zdDozMDAwL3Bvc3RzIiwgewogICAgICAgICAgICAgIGhlYWRlcnM6IGdldEh0dHBIZWFkZXJzKCkKICAgICAgICAgICAgfSk7CgogICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICBhcGlfcmVzcG9uc2UgPSBfY29udGV4dC5zZW50OwoKICAgICAgICAgICAgaWYgKGFwaV9yZXNwb25zZS5vaykgewogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1OwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkVycm9yICIuY29uY2F0KGFwaV9yZXNwb25zZS5zdGF0dXMsICIgOiBMaXN0IG9mIHBvc3RzIGNvdWxkIG5vdCBiZSByZXRyaWV2ZWQuIikpOwoKICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgcG9zdHNfbGlzdCA9IFtdOwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gODsKICAgICAgICAgICAgcmV0dXJuIGFwaV9yZXNwb25zZS5qc29uKCk7CgogICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICBqc29uX3Bvc3RzX2xpc3QgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICBqc29uX3Bvc3RzX2xpc3QuZm9yRWFjaChmdW5jdGlvbiAoanNvbl9wb3N0KSB7CiAgICAgICAgICAgICAgdmFyIGlkID0ganNvbl9wb3N0LnBvc3RfaWQ7CiAgICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSBqc29uX3Bvc3QucG9zdF9jb250ZW50OwogICAgICAgICAgICAgIHZhciBpbWFnZV91cmwgPSBqc29uX3Bvc3QuaW1hZ2VfdXJsOwogICAgICAgICAgICAgIHZhciBhdXRob3IgPSBqc29uX3Bvc3QucG9zdF9hdXRob3I7CiAgICAgICAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShqc29uX3Bvc3QucG9zdF9kYXRlKTsKICAgICAgICAgICAgICB2YXIgY29tbWVudHNfbnVtYmVyID0ganNvbl9wb3N0LmNvbW1lbnRzX251bWJlcjsKICAgICAgICAgICAgICB2YXIgY29tbWVudHMgPSBqc29uX3Bvc3QubGFzdF9jb21tZW50ID8gW2pzb25fcG9zdC5sYXN0X2NvbW1lbnRdIDogW107CiAgICAgICAgICAgICAgdmFyIG5ld19wb3N0ID0gbmV3IFBvc3RDbGFzcyhpZCwgY29udGVudCwgYXV0aG9yLCBkYXRlLCBjb21tZW50c19udW1iZXIsIGNvbW1lbnRzLCBpbWFnZV91cmwpOwogICAgICAgICAgICAgIHBvc3RzX2xpc3QucHVzaChuZXdfcG9zdCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBwb3N0c19saXN0KTsKCiAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUpOwogIH0pKTsKICByZXR1cm4gX2dldFBvc3RzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBwb3N0TmV3UG9zdChfeCwgX3gyKSB7CiAgcmV0dXJuIF9wb3N0TmV3UG9zdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBfcG9zdE5ld1Bvc3QoKSB7CiAgX3Bvc3ROZXdQb3N0ID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMihjb250ZW50LCBhdXRob3IpIHsKICAgIHZhciBpbWFnZV91cmwsCiAgICAgICAgcmVxdWVzdCwKICAgICAgICByZXNwb25zZSwKICAgICAgICBfYXJnczIgPSBhcmd1bWVudHM7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBpbWFnZV91cmwgPSBfYXJnczIubGVuZ3RoID4gMiAmJiBfYXJnczJbMl0gIT09IHVuZGVmaW5lZCA/IF9hcmdzMlsyXSA6IG51bGw7CiAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIGZldGNoKCJodHRwOi8vbG9jYWxob3N0OjMwMDAvcG9zdHMiLCB7CiAgICAgICAgICAgICAgbWV0aG9kOiAiUE9TVCIsCiAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgICAgICAgY29udGVudDogY29udGVudCwKICAgICAgICAgICAgICAgIHVzZXI6IGF1dGhvciwKICAgICAgICAgICAgICAgIGltYWdlX3VybDogaW1hZ2VfdXJsCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgaGVhZGVyczogZ2V0SHR0cEhlYWRlcnMoKQogICAgICAgICAgICB9KTsKCiAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgIHJlcXVlc3QgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA2OwogICAgICAgICAgICByZXR1cm4gcmVxdWVzdC5qc29uKCk7CgogICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0Mi5zZW50OwoKICAgICAgICAgICAgaWYgKHJlcXVlc3Qub2spIHsKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiRXJyb3IgIi5jb25jYXQocmVxdWVzdC5zdGF0dXMsICIgOiAiKS5jb25jYXQocmVzcG9uc2UuZXJyb3IpKTsKCiAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCByZXNwb25zZSk7CgogICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTIpOwogIH0pKTsKICByZXR1cm4gX3Bvc3ROZXdQb3N0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBkZWxldGVQb3N0KF94MykgewogIHJldHVybiBfZGVsZXRlUG9zdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBfZGVsZXRlUG9zdCgpIHsKICBfZGVsZXRlUG9zdCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMocG9zdF9pZCkgewogICAgdmFyIHJlcXVlc3QsIHJlc3BvbnNlOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAyOwogICAgICAgICAgICByZXR1cm4gZmV0Y2goImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9wb3N0cy8iLmNvbmNhdChwb3N0X2lkLCAiL2RlbGV0ZSIpLCB7CiAgICAgICAgICAgICAgbWV0aG9kOiAiUE9TVCIsCiAgICAgICAgICAgICAgaGVhZGVyczogZ2V0SHR0cEhlYWRlcnMoKQogICAgICAgICAgICB9KTsKCiAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgIHJlcXVlc3QgPSBfY29udGV4dDMuc2VudDsKICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA1OwogICAgICAgICAgICByZXR1cm4gcmVxdWVzdC5qc29uKCk7CgogICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0My5zZW50OwoKICAgICAgICAgICAgaWYgKHJlcXVlc3Qub2spIHsKICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDg7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiRXJyb3IgIi5jb25jYXQocmVxdWVzdC5zdGF0dXMsICIgOiAiKS5jb25jYXQocmVzcG9uc2UuZXJyb3IpKTsKCiAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iLCByZXNwb25zZSk7CgogICAgICAgICAgY2FzZSA5OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlMyk7CiAgfSkpOwogIHJldHVybiBfZGVsZXRlUG9zdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9"},{"version":3,"sources":["/home/praful/aappp/OC_7-Build_a_Full-Stack_solution-main/frontend/src/helpers/post-getter.ts"],"names":[],"mappings":"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","sourcesContent":["import { CommentType, PostClass } from \"@/types\";\nimport { getHttpHeaders } from \"./http-header-getter\";\n\nexport async function getPosts(): Promise<PostClass[]> {\n  const api_response = await fetch(\"http://localhost:3000/posts\", {\n    headers: getHttpHeaders(),\n  });\n\n  if (!api_response.ok) {\n    throw new Error(\n      `Error ${api_response.status} : List of posts could not be retrieved.`\n    );\n  }\n\n  const posts_list: PostClass[] = [];\n\n  const json_posts_list = await api_response.json();\n\n  json_posts_list.forEach((json_post: JSONPost) => {\n    const id = json_post.post_id;\n    const content = json_post.post_content;\n    const image_url = json_post.image_url;\n    const author = json_post.post_author;\n    const date = new Date(json_post.post_date);\n    const comments_number = json_post.comments_number;\n    const comments = json_post.last_comment ? [json_post.last_comment] : [];\n\n    const new_post = new PostClass(\n      id,\n      content,\n      author,\n      date,\n      comments_number,\n      comments,\n      image_url\n    );\n\n    posts_list.push(new_post);\n  });\n\n  return posts_list;\n}\n\ntype JSONPost = {\n  post_id: number;\n  post_content: string;\n  image_url: string | null;\n  post_author: string;\n  post_date: string;\n  comments_number: number;\n  last_comment: CommentType;\n};\n\nexport async function postNewPost(\n  content: string,\n  author: number,\n  image_url: string | null = null\n) {\n  const request = await fetch(\"http://localhost:3000/posts\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      content: content,\n      user: author,\n      image_url: image_url,\n    }),\n    headers: getHttpHeaders(),\n  });\n\n  const response = await request.json();\n\n  if (!request.ok) {\n    throw new Error(`Error ${request.status} : ${response.error}`);\n  }\n\n  return response;\n}\n\nexport async function deletePost(post_id: number): Promise<any> {\n  const request = await fetch(`http://localhost:3000/posts/${post_id}/delete`, {\n    method: \"POST\",\n    headers: getHttpHeaders(),\n  });\n\n  const response = await request.json();\n\n  if (!request.ok) {\n    throw new Error(`Error ${request.status} : ${response.error}`);\n  }\n\n  return response;\n}\n"],"sourceRoot":""}]}
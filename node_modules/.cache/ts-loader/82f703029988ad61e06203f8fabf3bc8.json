{"remainingRequest":"/home/praful/aappp/OC_7-Build_a_Full-Stack_solution-main/frontend/node_modules/babel-loader/lib/index.js!/home/praful/aappp/OC_7-Build_a_Full-Stack_solution-main/frontend/node_modules/ts-loader/index.js??ref--13-2!/home/praful/aappp/OC_7-Build_a_Full-Stack_solution-main/frontend/src/helpers/comment-getter.ts","dependencies":[{"path":"/home/praful/aappp/OC_7-Build_a_Full-Stack_solution-main/frontend/src/helpers/comment-getter.ts","mtime":1624537514000},{"path":"/home/praful/aappp/OC_7-Build_a_Full-Stack_solution-main/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/praful/aappp/OC_7-Build_a_Full-Stack_solution-main/frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/praful/aappp/OC_7-Build_a_Full-Stack_solution-main/frontend/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL3ByYWZ1bC9hYXBwcC9PQ183LUJ1aWxkX2FfRnVsbC1TdGFja19zb2x1dGlvbi1tYWluL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCB7IGdldEh0dHBIZWFkZXJzIH0gZnJvbSAiLi9odHRwLWhlYWRlci1nZXR0ZXIiOwpleHBvcnQgZnVuY3Rpb24gcG9zdE5ld0NvbW1lbnQoX3gpIHsKICByZXR1cm4gX3Bvc3ROZXdDb21tZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9wb3N0TmV3Q29tbWVudCgpIHsKICBfcG9zdE5ld0NvbW1lbnQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoY29tbWVudCkgewogICAgdmFyIHJlcXVlc3QsIHJlc3BvbnNlOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgcmV0dXJuIGZldGNoKCJodHRwOi8vbG9jYWxob3N0OjMwMDAvcG9zdHMvIi5jb25jYXQoY29tbWVudC5wb3N0LCAiL2NvbW1lbnRzIiksIHsKICAgICAgICAgICAgICBtZXRob2Q6ICJQT1NUIiwKICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgICAgICAgICBjb250ZW50OiBjb21tZW50LmNvbnRlbnQsCiAgICAgICAgICAgICAgICB1c2VyX2lkOiBjb21tZW50LmF1dGhvcgogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIGhlYWRlcnM6IGdldEh0dHBIZWFkZXJzKCkKICAgICAgICAgICAgfSk7CgogICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICByZXF1ZXN0ID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU7CiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0Lmpzb24oKTsKCiAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQuc2VudDsKCiAgICAgICAgICAgIGlmIChyZXF1ZXN0Lm9rKSB7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDg7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiRXJyb3IgIi5jb25jYXQocmVxdWVzdC5zdGF0dXMsICIgOiAiKS5jb25jYXQocmVzcG9uc2UuZXJyb3IpKTsKCiAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHJlc3BvbnNlKTsKCiAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZSk7CiAgfSkpOwogIHJldHVybiBfcG9zdE5ld0NvbW1lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIGdldEFsbENvbW1lbnRzKF94MikgewogIHJldHVybiBfZ2V0QWxsQ29tbWVudHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gX2dldEFsbENvbW1lbnRzKCkgewogIF9nZXRBbGxDb21tZW50cyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIocG9zdF9pZCkgewogICAgdmFyIHJlcXVlc3QsIHJlc3BvbnNlLCBjb21tZW50c19saXN0OwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyOwogICAgICAgICAgICByZXR1cm4gZmV0Y2goImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9wb3N0cy8iLmNvbmNhdChwb3N0X2lkLCAiL2NvbW1lbnRzIiksIHsKICAgICAgICAgICAgICBoZWFkZXJzOiBnZXRIdHRwSGVhZGVycygpCiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgcmVxdWVzdCA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDU7CiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0Lmpzb24oKTsKCiAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQyLnNlbnQ7CgogICAgICAgICAgICBpZiAocmVxdWVzdC5vaykgewogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gODsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJFcnJvciAiLmNvbmNhdChyZXF1ZXN0LnN0YXR1cywgIiA6ICIpLmNvbmNhdChyZXNwb25zZS5lcnJvcikpOwoKICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgY29tbWVudHNfbGlzdCA9IFtdOwogICAgICAgICAgICByZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIChjb21tZW50KSB7CiAgICAgICAgICAgICAgY29tbWVudHNfbGlzdC5wdXNoKGNvbW1lbnQpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIGNvbW1lbnRzX2xpc3QpOwoKICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUyKTsKICB9KSk7CiAgcmV0dXJuIF9nZXRBbGxDb21tZW50cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpleHBvcnQgZnVuY3Rpb24gZGVsZXRlQ29tbWVudChfeDMpIHsKICByZXR1cm4gX2RlbGV0ZUNvbW1lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gX2RlbGV0ZUNvbW1lbnQoKSB7CiAgX2RlbGV0ZUNvbW1lbnQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKGNvbW1lbnRfaWQpIHsKICAgIHZhciByZXF1ZXN0LCByZXNwb25zZTsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMjsKICAgICAgICAgICAgcmV0dXJuIGZldGNoKCJodHRwOi8vbG9jYWxob3N0OjMwMDAvY29tbWVudHMvIi5jb25jYXQoY29tbWVudF9pZCwgIi9kZWxldGUiKSwgewogICAgICAgICAgICAgIG1ldGhvZDogIlBPU1QiLAogICAgICAgICAgICAgIGhlYWRlcnM6IGdldEh0dHBIZWFkZXJzKCkKICAgICAgICAgICAgfSk7CgogICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICByZXF1ZXN0ID0gX2NvbnRleHQzLnNlbnQ7CiAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNTsKICAgICAgICAgICAgcmV0dXJuIHJlcXVlc3QuanNvbigpOwoKICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dDMuc2VudDsKCiAgICAgICAgICAgIGlmIChyZXF1ZXN0Lm9rKSB7CiAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA4OwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkVycm9yICIuY29uY2F0KHJlcXVlc3Quc3RhdHVzLCAiIDogIikuY29uY2F0KHJlc3BvbnNlLmVycm9yKSk7CgogICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIiwgcmVzcG9uc2UpOwoKICAgICAgICAgIGNhc2UgOToKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTMpOwogIH0pKTsKICByZXR1cm4gX2RlbGV0ZUNvbW1lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQ=="},{"version":3,"sources":["/home/praful/aappp/OC_7-Build_a_Full-Stack_solution-main/frontend/src/helpers/comment-getter.ts"],"names":[],"mappings":";;;;;AACA,SAAS,cAAT,QAA+B,sBAA/B;AAEA,gBAAsB,cAAtB;AAAA;AAAA;;;4EAAO,iBAA8B,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEiB,KAAK,uCACM,OAAO,CAAC,IADd,gBAEzB;AACE,cAAA,MAAM,EAAE,MADV;AAEE,cAAA,IAAI,EAAE,IAAI,CAAC,SAAL,CAAe;AACnB,gBAAA,OAAO,EAAE,OAAO,CAAC,OADE;AAEnB,gBAAA,OAAO,EAAE,OAAO,CAAC;AAFE,eAAf,CAFR;AAME,cAAA,OAAO,EAAE,cAAc;AANzB,aAFyB,CAFtB;;AAAA;AAEC,YAAA,OAFD;AAAA;AAAA,mBAckB,OAAO,CAAC,IAAR,EAdlB;;AAAA;AAcC,YAAA,QAdD;;AAAA,gBAgBA,OAAO,CAAC,EAhBR;AAAA;AAAA;AAAA;;AAAA,kBAiBG,IAAI,KAAJ,iBAAmB,OAAO,CAAC,MAA3B,gBAAuC,QAAQ,CAAC,KAAhD,EAjBH;;AAAA;AAAA,6CAoBE,QApBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA8BP,gBAAsB,cAAtB;AAAA;AAAA;;;4EAAO,kBAA8B,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACiB,KAAK,uCACM,OADN,gBAEzB;AACE,cAAA,OAAO,EAAE,cAAc;AADzB,aAFyB,CADtB;;AAAA;AACC,YAAA,OADD;AAAA;AAAA,mBAQkB,OAAO,CAAC,IAAR,EARlB;;AAAA;AAQC,YAAA,QARD;;AAAA,gBAUA,OAAO,CAAC,EAVR;AAAA;AAAA;AAAA;;AAAA,kBAWG,IAAI,KAAJ,iBAAmB,OAAO,CAAC,MAA3B,gBAAuC,QAAQ,CAAC,KAAhD,EAXH;;AAAA;AAcC,YAAA,aAdD,GAcgC,EAdhC;AAgBL,YAAA,QAAQ,CAAC,OAAT,CAAiB,UAAC,OAAD,EAAyB;AACxC,cAAA,aAAa,CAAC,IAAd,CAAmB,OAAnB;AACD,aAFD;AAhBK,8CAoBE,aApBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAuBP,gBAAsB,aAAtB;AAAA;AAAA;;;2EAAO,kBAA6B,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACiB,KAAK,0CACS,UADT,cAEzB;AACE,cAAA,MAAM,EAAE,MADV;AAEE,cAAA,OAAO,EAAE,cAAc;AAFzB,aAFyB,CADtB;;AAAA;AACC,YAAA,OADD;AAAA;AAAA,mBASkB,OAAO,CAAC,IAAR,EATlB;;AAAA;AASC,YAAA,QATD;;AAAA,gBAWA,OAAO,CAAC,EAXR;AAAA;AAAA;AAAA;;AAAA,kBAYG,IAAI,KAAJ,iBAAmB,OAAO,CAAC,MAA3B,gBAAuC,QAAQ,CAAC,KAAhD,EAZH;;AAAA;AAAA,8CAeE,QAfF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { CommentType } from \"@/types\";\nimport { getHttpHeaders } from \"./http-header-getter\";\n\nexport async function postNewComment(comment: CommentType): Promise<Comment> {\n  // Correct return type ?\n  const request = await fetch(\n    `http://localhost:3000/posts/${comment.post}/comments`,\n    {\n      method: \"POST\",\n      body: JSON.stringify({\n        content: comment.content,\n        user_id: comment.author,\n      }),\n      headers: getHttpHeaders(),\n    }\n  );\n\n  const response = await request.json();\n\n  if (!request.ok) {\n    throw new Error(`Error ${request.status} : ${response.error}`);\n  }\n\n  return response;\n}\n\nexport interface Comment {\n  id: number;\n  content: string;\n  author_id: number;\n  post_id: number;\n}\n\nexport async function getAllComments(post_id: number): Promise<CommentType[]> {\n  const request = await fetch(\n    `http://localhost:3000/posts/${post_id}/comments`,\n    {\n      headers: getHttpHeaders(),\n    }\n  );\n\n  const response = await request.json();\n\n  if (!request.ok) {\n    throw new Error(`Error ${request.status} : ${response.error}`);\n  }\n\n  const comments_list: CommentType[] = [];\n\n  response.forEach((comment: CommentType) => {\n    comments_list.push(comment);\n  });\n\n  return comments_list;\n}\n\nexport async function deleteComment(comment_id: number): Promise<any> {\n  const request = await fetch(\n    `http://localhost:3000/comments/${comment_id}/delete`,\n    {\n      method: \"POST\",\n      headers: getHttpHeaders(),\n    }\n  );\n\n  const response = await request.json();\n\n  if (!request.ok) {\n    throw new Error(`Error ${request.status} : ${response.error}`);\n  }\n\n  return response;\n}\n"],"sourceRoot":""}]}